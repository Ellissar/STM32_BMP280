/*
 * BMP280.h
 *
 *  Created on: 20 нояб. 2019 г.
 *      Author: ellis
 *
 *      Как пользоваться:
 *      1. Инициализировать I2C.
 *      2. Объявить и инициализировать структуру BMP280_TypeDef например так:	BMP280_TypeDef BMP280;
 * 	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  				BMP280.hi2c = &hi2c2;
 * 	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  				BMP280.Address = BMP280_ADDRESS;
 *																  				BMP280.IIRfilter = BMP280_IIR_FILTER_OFF;
 *																  				BMP280.mode = BMP280_PM_NORMAL;
 *																  				BMP280.osrs_p = BMP280_OSRS_P_X16;
 *																  				BMP280.osrs_t = BMP280_OSRS_T_X16;
 *																  				BMP280.t_sb = BMP280_T_SB_62_5;
 *		3. Однократно вызвать функцию BMP280_Init;
 *		4. Для получения давления и температуры в целочисленном формате или формате с плавающей запятой
 *		   вызвать соответственно BMP280_GetDataInt или BMP280_GetDataReal.
 *		5. Значения температуры и давления будут записаны в структуру в соответствующие поля.
 *		6. Для вычисления атмосферного давления в мм. рт. ст. вызвать функцию BMP280_GetmmHg.
 */

#ifndef BMP280_H_
#define BMP280_H_
/*-----------------------------------------------------------------------------*/
/*-------------------------------- INCLUDES -----------------------------------*/
/*-----------------------------------------------------------------------------*/
#include "main.h"

/*-----------------------------------------------------------------------------*/
/*--------------------------------- DEFINES -----------------------------------*/
/*-----------------------------------------------------------------------------*/
/*------------------------------ адрес датчика --------------------------------*/
#define BMP280_ADDRESS			0xEC //SDO to GND = 0x76(0xEC), SDO to Vddio = 0x77(0xEE)

/*--------------------------------- регистры ----------------------------------*/
#define BMP280_ID				0xD0 //чтнение этого регистра всегда возвращает 0x58
#define BMP280_SOFT_RESET		0xE0 //для сброса необходимо записать в этот регистр значение 0xB6
#define BMP280_STATUS			0xF3 /*im_update[0] если = 0 значит измерение выполнено, можно считывать данные из
										регистров температуры и давления.
										measuring[0] автоматически устанавливается в «1», когда данные
										энергонезависимой памяти копируются в регистры изображений, и обратно
										в «0», когда копирование завершено. Данные копируются при включении
										питания и перед каждым преобразованием.*/
#define BMP280_CTRL_MEAS		0xF4 //osrs_t [7:5] osrs_p [4:2] mode [1:0]
#define BMP280_CONFIG			0xF5 //t_sb[7:5] filter[4:2] spi3w_en[0]
#define BMP280_PRESS_MSB		0xF7
#define BMP280_PRESS_LSB		0xF8
#define BMP280_PRESS_XLSB		0xF9
#define BMP280_TEMP_MSB			0xFA
#define BMP280_TEMP_LSB			0xFB
#define BMP280_TEMP_XLSB		0xFC

/*---------------- регистры с калибровочными коэффициентами -------------------*/
#define BMP280_DIG_T1_LSB		0x88
#define BMP280_DIG_T1_MSB		0x89
#define BMP280_DIG_T2_LSB		0x8A
#define BMP280_DIG_T2_MSB		0x8B
#define BMP280_DIG_T3_LSB		0x8C
#define BMP280_DIG_T3_MSB		0x8D

#define BMP280_DIG_P1_LSB		0x8E
#define BMP280_DIG_P1_MSB		0x8F
#define BMP280_DIG_P2_LSB		0x90
#define BMP280_DIG_P2_MSB		0x91
#define BMP280_DIG_P3_LSB		0x92
#define BMP280_DIG_P3_MSB		0x93
#define BMP280_DIG_P4_LSB		0x94
#define BMP280_DIG_P4_MSB		0x95
#define BMP280_DIG_P5_LSB		0x96
#define BMP280_DIG_P5_MSB		0x97
#define BMP280_DIG_P6_LSB		0x98
#define BMP280_DIG_P6_MSB		0x99
#define BMP280_DIG_P7_LSB		0x9A
#define BMP280_DIG_P7_MSB		0x9B
#define BMP280_DIG_P8_LSB		0x9C
#define BMP280_DIG_P8_MSB		0x9D
#define BMP280_DIG_P9_LSB		0x9E
#define BMP280_DIG_P9_MSB		0x9F

/*------------------------------- power mode ----------------------------------*/
#define BMP280_PM_SLEEEP		0x00 /*Спящий режим устанавливается по умолчанию после сброса питания.
									   В этом режиме измерения не выполняются, энергопотребление минимальное.*/
#define BMP280_PM_FORCED		0x01 /*В принудительном режиме выполняется одно измерение в соответствии с
									   выбранными параметрами измерения и фильтрацией. Когда измерение
									   завершено, датчик возвращается в спящий режим, и результаты измерений
									   могут быть получены из регистров данных. Для следующего измерения
									   принудительный режим должен быть выбран снова. Этот режим похож на
									   работу BMP180. Принудительный режим рекомендуется для приложений,
									   которые требуют низкой частоты дискретизации или синхронизации на
									   основе хоста.*/
#define BMP280_PM_NORMAL		0x03 /*Нормальный режим непрерывно переключается между (активным) периодом
									   измерения и (неактивным) периодом ожидания, время которого определяется
									   t_sb. Ток в период t_sb (IDDSB) немного выше, чем в режиме sleep.
									   После установки режима, параметров измерения и фильтра последние
									   результаты измерений могут быть получены из регистров данных без
									   необходимости дальнейшего доступа к записи. Нормальный режим
									   рекомендуется при использовании IIR фильтра и полезен для применений,
									   в которых следует фильтровать кратковременные помехи (например,
									   воздействие на датчик).*/

/*--------------------------------- osrs_p ------------------------------------*/
#define BMP280_OSRS_P_SKIP		0x00 //не измерять давление
#define BMP280_OSRS_P_X1		0x01 //16 bit / 2.62 Pa
#define BMP280_OSRS_P_X2		0x02 //17 bit / 1.31 Pa
#define BMP280_OSRS_P_X4		0x03 //18 bit / 0.66 Pa
#define BMP280_OSRS_P_X8		0x04 //19 bit / 0.33 Pa
#define BMP280_OSRS_P_X16		0x05 //20 bit / 0.16 Pa

/*--------------------------------- osrs_t ------------------------------------*/
#define BMP280_OSRS_T_SKIP		0x00 //не измерять температуру
#define BMP280_OSRS_T_X1		0x01 //16 bit / 0.0050 °C
#define BMP280_OSRS_T_X2		0x02 //17 bit / 0.0025 °C
#define BMP280_OSRS_T_X4		0x03 //18 bit / 0.0012 °C
#define BMP280_OSRS_T_X8		0x04 //19 bit / 0.0006 °C
#define BMP280_OSRS_T_X16		0x05 //20 bit / 0.0003 °C

/*---------------------------------- t_sb -------------------------------------*/
#define BMP280_T_SB_0_5			0x00 //0.5 ms
#define BMP280_T_SB_62_5		0x01 //62.5 ms
#define BMP280_T_SB_125			0x02 //125 ms
#define BMP280_T_SB_250			0x03 //250 ms
#define BMP280_T_SB_500			0x04 //500 ms
#define BMP280_T_SB_1000		0x05 //1000 ms
#define BMP280_T_SB_2000		0x06 //2000 ms
#define BMP280_T_SB_4000		0x07 //4000 ms

/*------------------------- IIR filter coefficient ----------------------------*/
#define BMP280_IIR_FILTER_OFF	0x00
#define BMP280_IIR_FILTER_2		0x01
#define BMP280_IIR_FILTER_4		0x02
#define BMP280_IIR_FILTER_8		0x03
#define BMP280_IIR_FILTER_16	0x04

/*-----------------------------------------------------------------------------*/
/*--------------------------------- TYPEDEF -----------------------------------*/
/*-----------------------------------------------------------------------------*/
typedef struct{
	uint16_t		dig_T1;
	int16_t			dig_T2;
	int16_t			dig_T3;
	uint16_t		dig_P1;
	int16_t			dig_P2;
	int16_t			dig_P3;
	int16_t			dig_P4;
	int16_t			dig_P5;
	int16_t			dig_P6;
	int16_t			dig_P7;
	int16_t			dig_P8;
	int16_t			dig_P9;
}BMP280_Compensation;

typedef struct
{
	I2C_HandleTypeDef		*hi2c; //указатель на структуру I2C к которому подключён датчик
	uint8_t					Address; //Адрес датчика на шине I2C

	uint8_t					osrs_t; //дискретизация температуры
	uint8_t					osrs_p; //дискретизация давления
	uint8_t					mode; //режим работы датчика (Sleep, Forced, Normal)
	uint8_t					t_sb; //время ожидания между измерениями. Только для Normal mode.
	uint8_t					IIRfilter; //IIR фильтр

	BMP280_Compensation		Comp;
	int32_t					RAWPress;
	int32_t					RAWTemp;

	int32_t					TempInt32; //Температура в градусах цельсия с резрешением 0.01 градус. Пример: значение "5123" равно "51.23" градуса.
	double					TempDouble; //Температура в градусах цельсия. Пример: значение "51.23" равно "51.23" градуса.

	uint32_t				PressUint32; //Атмосферное давление в Паскалях. Пример: значение "96386" равно 96386 Па.
	double					PressDouble; //Атмосферное давление в Паскалях. Пример: значение "96386.2" равно 96386.2 Па.

	uint32_t				mmHgUint32; //Атмосферное давление в мм. рт. ст.
	double					mmHgDouble; //Атмосферное давление в мм. рт. ст.
} BMP280_TypeDef;

/*-----------------------------------------------------------------------------*/
/*-------------------------------- FUNCTIONS ----------------------------------*/
/*-----------------------------------------------------------------------------*/
HAL_StatusTypeDef BMP280_Init (BMP280_TypeDef *BMP280);
void BMP280_GetDataReal (BMP280_TypeDef *BMP280);
void BMP280_GetDataInt (BMP280_TypeDef *BMP280);
void BMP280_GetmmHg (BMP280_TypeDef *BMP280);

#endif /* BMP280_H_ */
